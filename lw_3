#include <GL/freeglut.h>
#include <GL/gl.h>
#include <cstdio>
#include <cmath>

// ... (функции drawCube и reshape остаются без изменений) ...
float startTime = 0;
GLfloat animationTime = 0.0f;
const GLfloat animationDuration = 5.0f;
bool forward = true;
GLfloat animationSpeed = 0.033f; // скорость анимации (примерно 30 FPS)
bool paused = false; // флаг паузы

// Определяем начальную и конечную точки как переменные
const GLfloat startX = 0.0f;
const GLfloat startY = 0.0f;
const GLfloat startZ = 5.0f;

const GLfloat endX = 5.0f;
const GLfloat endY = 2.0f;
const GLfloat endZ = 0.0f;

// Функция для рисования куба
void drawCube(double size) {
    glPushMatrix();
    glScalef(size, size, size); // Изменяем размер куба

    glBegin(GL_QUADS);
    glColor3f(0.0f, 0.0f, 0.5f);

    // Передняя грань
    glVertex3f(1.0, 1.0, 1.0);
    glVertex3f(-1.0, 1.0, 1.0);
    glVertex3f(-1.0, -1.0, 1.0);
    glVertex3f(1.0, -1.0, 1.0);

    // Задняя грань
    glVertex3f(1.0, 1.0, -1.0);
    glVertex3f(1.0, -1.0, -1.0);
    glVertex3f(-1.0, -1.0, -1.0);
    glVertex3f(-1.0, 1.0, -1.0);

    // Правая грань
    glVertex3f(1.0, 1.0, 1.0);
    glVertex3f(1.0, -1.0, 1.0);
    glVertex3f(1.0, -1.0, -1.0);
    glVertex3f(1.0, 1.0, -1.0);

    // Левая грань
    glVertex3f(-1.0, 1.0, 1.0);
    glVertex3f(-1.0, 1.0, -1.0);
    glVertex3f(-1.0, -1.0, -1.0);
    glVertex3f(-1.0, -1.0, 1.0);

    // Верхняя грань
    glVertex3f(1.0, 1.0, 1.0);
    glVertex3f(1.0, 1.0, -1.0);
    glVertex3f(-1.0, 1.0, -1.0);
    glVertex3f(-1.0, 1.0, 1.0);

    // Нижняя грань
    glVertex3f(1.0, -1.0, 1.0);
    glVertex3f(-1.0, -1.0, 1.0);
    glVertex3f(-1.0, -1.0, -1.0);
    glVertex3f(1.0, -1.0, -1.0);

    glEnd();

    glPopMatrix();
}



void display() {
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glClearColor(1.0f, 1.0f, 1.0f, 1.0f); // Белый фон

    glLoadIdentity();

    GLfloat t;
    t = animationTime / animationDuration; // Движение назад

    GLfloat cameraX = (1 - t) * startX + t * endX;
    GLfloat cameraY = (1 - t) * startY + t * endY;
    GLfloat cameraZ = (1 - t) * startZ + t * endZ;

    gluLookAt(cameraX, cameraY, cameraZ, 0, 0, 0, 0, 1, 0);

    // Рисуем куб
    drawCube(1.0);  // Размер куба 1.0


    // Рисуем второй куб, смещенный
    glPushMatrix();
    glTranslatef(2.0, 1.0, 0.0);
    glRotatef(45, 1, 1, 0); // Поворот второго куба
    drawCube(0.5);  // Размер 0.5
    glPopMatrix();

    glFlush();
    glutSwapBuffers();
    glutPostRedisplay();
}


void reshape(int width, int height) {
    glViewport(0, 0, width, height);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(60.0, (double)width / height, 0.1, 100.0);
    glMatrixMode(GL_MODELVIEW);
}

void timer(int value) {
    glutPostRedisplay();
    glutTimerFunc(33, timer, 0); // 33 мс ≈ 30 FPS
}

void keyboard(unsigned char key, int x, int y) {
    switch (key) {
        case 27: // ESC - выход
            exit(0);
            break;
        case ' ': // Пробел - пауза/возобновление
            paused = !paused;
            break;
        case GLUT_KEY_UP: // Стрелка вверх - увеличение скорости
            animationSpeed += 0.005f;
            break;
        case GLUT_KEY_DOWN: // Стрелка вниз - уменьшение скорости
            animationSpeed = fmax(0.001f, animationSpeed - 0.005f);
            break;
        case '1': // 1 - переход в начальную точку
            animationTime = 0.0f;
            forward = true;
            glutPostRedisplay();
            break;
        case '2': // 2 - переход в конечную точку
            animationTime = animationDuration;
            forward = false;
            glutPostRedisplay();
            break;
    }
}

void specialKeyboard(int key, int x, int y) {
  keyboard((unsigned char)key,x,y); // Обработка специальных клавиш
}

void update(int value) {
    if (!paused) {
        if (forward) {
            animationTime += animationSpeed;
            if (animationTime >= animationDuration) {
                animationTime = animationDuration;
                forward = false;
            }
        } else {
            animationTime -= animationSpeed;
            if (animationTime <= 0.0f) {
                animationTime = 0.0f;
                forward = true;
            }
        }
    }
    glutPostRedisplay();
    glutTimerFunc(33, update, 0);
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
    glutInitWindowSize(640, 480);
    glutInitWindowPosition(100, 100);
    glutCreateWindow("Моя 3D сцена");

    glEnable(GL_DEPTH_TEST);

    startTime = glutGet(GLUT_ELAPSED_TIME); // Запоминаем время запуска

   glutKeyboardFunc(keyboard);
    glutSpecialFunc(specialKeyboard);
    glutDisplayFunc(display);
    glutReshapeFunc(reshape);
    glutTimerFunc(33, update, 0);
    glutMainLoop();
    return 0;
}
